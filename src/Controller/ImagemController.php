<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;

use App\Entity\Evento;
use App\Entity\Imagem;
use App\Form\ImagemType;
use Symfony\Component\DomCrawler\Image;

class ImagemController extends AbstractController
{
    /**
     * @Route("/admin/eventos/{evento_id}", name="imagens")
     */
    public function index($evento_id)
    {
        $em = $this->getDoctrine()->getManager();

        $evento = $em->getRepository(Evento::class)
            ->find($evento_id);

        return $this->render('imagem/index.html.twig', [
            'evento' => $evento,
        ]);
    }

    /**
     * @Route("/admin/eventos/{evento_id}/novo", name="nova_imagem")
     */
    public function novas($evento_id, Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        $evento = $em->getRepository(Evento::class)
            ->find($evento_id);

        $imagem = new Imagem();
        $imagem->setEvento($evento);

        $form = $this->createForm(ImagemType::class, $imagem);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $file = $imagem->getImagem();

            $strm =\fopen($file->getRealPath(),'rb');

             $im = base64_encode(stream_get_contents( $strm, -1, 10));
            
            $imagem->setImagem($im);

            \fclose($strm);
            $em->persist($imagem);
            $em->flush();




            return $this->redirect('/admin/eventos/'.$evento_id);
           
        }

        return $this->render('imagem/formulario.twig', array(
            'form' => $form->createView(),
            'titulo' => 'Imagem',
            'evento' => $evento
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
